import { JwtPayload, SSOParamsI, KeyValueI } from '../models';
export declare class Verifier {
    static assertRequiredParamsForScope: (scope: string | string[], data: KeyValueI) => void;
    static verifyWebsiteSignature: (tokenPayload: JwtPayload | KeyValueI, ssoParams: SSOParamsI, websiteOwnerAddress: string) => boolean;
    static verifyAge: (jwtPayload: JwtPayload, tokenExpirationTime: number) => boolean;
    static verifyUserSignature: (tokenPayload: JwtPayload | KeyValueI) => boolean;
    /**
     * By default we do not check Silkey signature (if not provided) as token is provided by Silkey
     * itself and there is no incentives to manipulate with Silkey signature
     * But it is strongly recommended to provide `silkeyEthAddress` and have full validation.
     *
     * @param tokenPayload {string} token returned by Silkey
     * @param silkeyEthAddress {string|null} optional
     * @return {null|boolean}
     */
    static verifySilkeySignature: (tokenPayload: JwtPayload | KeyValueI, silkeyEthAddress?: string | undefined) => boolean | null;
}
//# sourceMappingURL=Verifier.d.ts.map