/**
 * @module SilkeySDK
 */
import { KeyValueI, SSOParamsI } from '../models';
import { JwtPayload } from '../models';
export declare const SSO_PARAMS_PREFIX = "sso";
export declare const SSO_PARAMS_GLUE = "::";
/**
 * Generates message to sign based on plain object data (keys and values)
 *
 * @method
 * @param data {{}}
 * @returns {string}
 *
 * @example
 *
 * messageToSign({ssoRedirectUrl: 'http://silkey.io', ssoRefId: 1});
 * // returns 'ssoRedirectUrl=http://silkey.io::ssoRefId=1'
 */
export declare const messageToSign: (data?: KeyValueI) => string;
/**
 * Generates all needed parameters (including signature) for requesting Silkey SSO
 *
 * @async
 * @method
 * @param privateKey {string} this should be private key of domain owner
 * @param params {SSOParamsI | KeyValueI}
 *  Object with data: {ssoRedirectUrl*, .ssoRedirectMethod, ssoCancelUrl*, ssoRefId, ssoScope, ssoTimestamp}
 *  marked with * are required by Silkey SSO
 * @returns {{signature, ssoTimestamp, ssoRedirectUrl, ssoRefId, ssoScope}}
 * @throws on missing required data
 * @example
 * // returns {ssoSignature, ssoTimestamp, ssoRedirectUrl, ssoRefId, ssoScope, ssoRedirectMethod}
 * await generateSSORequestParams(domainOwnerPrivateKey, {ssoRedirectUrl: 'http://silkey.io', ssoRefId: 1});
 */
export declare const generateSSORequestParams: (privateKey: string, params: SSOParamsI | KeyValueI) => Promise<KeyValueI>;
/**
 * Fetches public ethereum Silkey address directly from blockchain
 *
 * @param providerUri {string} ie: 'https://infura.io/v3/:infuraId' register to infura.io to get id
 * @param registryAddress {string} address of silkey smart contract registry,
 *  see list of addresses in README#registryAddress
 * @return {Promise<string>} public ethereum address of Silkey signer
 */
export declare const fetchSilkeyEthAddress: (providerUri: string, registryAddress: string) => Promise<string>;
/**
 * Verifies JWT token payload
 *
 * @method
 * @see https://jwt.io/ for details about token payload data
 * @param token {string} secret JWT token returned by Silkey, this token CAN NOT BE SHARED as it is like user password
 *  they are all returned back to you when user being authenticated
 * @param callbackParams
 * @param websiteOwnerAddress
 * @param silkeyEthAddress {string} public ethereum address of Silkey
 * @param tokenExpirationTime {number} max age of token in seconds, same token can be used to sign in many times,
 *   however from security perspective we should not allow for that case, because when somebody else steal token,
 *   he can access user account. That's why we should set expiration time. By deefault it iss set to 30 sec.
 *   When you pass 0 token will be always accepted.
 * @returns {JwtPayload|null} null when signatures are invalid, otherwise token payload
 * @throws when token is invalid or data are corrupted
 * @example
 * // returns {JwtPayload}
 * tokenPayloadVerifier('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0
 *  IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c');
 */
export declare const tokenPayloadVerifier: (token: string, callbackParams: SSOParamsI | KeyValueI, websiteOwnerAddress: string, silkeyEthAddress?: string | undefined, tokenExpirationTime?: number) => JwtPayload | null;
//# sourceMappingURL=sso.d.ts.map