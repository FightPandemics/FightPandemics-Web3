"use strict";
/**
 * @module SilkeySDK
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenPayloadVerifier = exports.fetchSilkeyEthAddress = exports.generateSSORequestParams = exports.messageToSign = exports.SSO_PARAMS_GLUE = exports.SSO_PARAMS_PREFIX = void 0;
const ethers_1 = require("ethers");
const jwt = __importStar(require("jsonwebtoken"));
const helpers_1 = require("../utils/helpers");
const models_1 = require("../models");
const contracts_1 = require("../contracts");
const models_2 = require("../models");
const Verifier_1 = require("./Verifier");
exports.SSO_PARAMS_PREFIX = 'sso';
exports.SSO_PARAMS_GLUE = '::';
/**
 * Generates message to sign based on plain object data (keys and values)
 *
 * @method
 * @param data {{}}
 * @returns {string}
 *
 * @example
 *
 * messageToSign({ssoRedirectUrl: 'http://silkey.io', ssoRefId: 1});
 * // returns 'ssoRedirectUrl=http://silkey.io::ssoRefId=1'
 */
const messageToSign = (data = {}) => {
    const msg = [];
    // eslint-disable-next-line
    const parser = (v) => helpers_1.isNotSet(v) ? '' : v.toString();
    const sliceLength = exports.SSO_PARAMS_PREFIX.length;
    Object.keys(data).sort().forEach(k => {
        if ('ssoSignature' !== k && k.slice(0, sliceLength) === exports.SSO_PARAMS_PREFIX && helpers_1.isSet(data[k])) {
            // empty strings included
            msg.push(`${k}=${parser(data[k])}`);
        }
    });
    return msg.join(exports.SSO_PARAMS_GLUE);
};
exports.messageToSign = messageToSign;
/**
 * Generates all needed parameters (including signature) for requesting Silkey SSO
 *
 * @async
 * @method
 * @param privateKey {string} this should be private key of domain owner
 * @param params {SSOParamsI | KeyValueI}
 *  Object with data: {ssoRedirectUrl*, .ssoRedirectMethod, ssoCancelUrl*, ssoRefId, ssoScope, ssoTimestamp}
 *  marked with * are required by Silkey SSO
 * @returns {{signature, ssoTimestamp, ssoRedirectUrl, ssoRefId, ssoScope}}
 * @throws on missing required data
 * @example
 * // returns {ssoSignature, ssoTimestamp, ssoRedirectUrl, ssoRefId, ssoScope, ssoRedirectMethod}
 * await generateSSORequestParams(domainOwnerPrivateKey, {ssoRedirectUrl: 'http://silkey.io', ssoRefId: 1});
 */
const generateSSORequestParams = async (privateKey, params) => {
    if (!helpers_1.isPrivateKey(privateKey)) {
        throw Error(`privateKey is invalid: '${privateKey}'`);
    }
    const dataToSign = models_2.SSOParams.import(params);
    const wallet = new ethers_1.ethers.Wallet(privateKey);
    await dataToSign.sign(wallet);
    return dataToSign.export();
};
exports.generateSSORequestParams = generateSSORequestParams;
/**
 * Fetches public ethereum Silkey address directly from blockchain
 *
 * @param providerUri {string} ie: 'https://infura.io/v3/:infuraId' register to infura.io to get id
 * @param registryAddress {string} address of silkey smart contract registry,
 *  see list of addresses in README#registryAddress
 * @return {Promise<string>} public ethereum address of Silkey signer
 */
const fetchSilkeyEthAddress = async (providerUri, registryAddress) => {
    const provider = contracts_1.createProvider(providerUri);
    const registry = new contracts_1.Registry(provider, registryAddress);
    const key = await registry.getAddress('Hades');
    if (!helpers_1.isEthereumAddress(key))
        throw Error(`Invalid key: ${key}`);
    return key;
};
exports.fetchSilkeyEthAddress = fetchSilkeyEthAddress;
/**
 * Verifies JWT token payload
 *
 * @method
 * @see https://jwt.io/ for details about token payload data
 * @param token {string} secret JWT token returned by Silkey, this token CAN NOT BE SHARED as it is like user password
 *  they are all returned back to you when user being authenticated
 * @param callbackParams
 * @param websiteOwnerAddress
 * @param silkeyEthAddress {string} public ethereum address of Silkey
 * @param tokenExpirationTime {number} max age of token in seconds, same token can be used to sign in many times,
 *   however from security perspective we should not allow for that case, because when somebody else steal token,
 *   he can access user account. That's why we should set expiration time. By deefault it iss set to 30 sec.
 *   When you pass 0 token will be always accepted.
 * @returns {JwtPayload|null} null when signatures are invalid, otherwise token payload
 * @throws when token is invalid or data are corrupted
 * @example
 * // returns {JwtPayload}
 * tokenPayloadVerifier('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0
 *  IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c');
 */
const tokenPayloadVerifier = (token, callbackParams, websiteOwnerAddress, silkeyEthAddress = undefined, tokenExpirationTime = 30) => {
    const ssoParams = models_2.SSOParams.import(callbackParams);
    try {
        const tokenPayload = jwt.decode(token);
        if (!tokenPayload || typeof tokenPayload === 'string') {
            console.warn(`tokenPayload should be object but got ${typeof tokenPayload}`);
            return null;
        }
        const jwtPayload = models_1.JwtPayload.import(tokenPayload);
        if (!Verifier_1.Verifier.verifyAge(jwtPayload, tokenExpirationTime)) {
            return null;
        }
        if (!Verifier_1.Verifier.verifyUserSignature(jwtPayload)) {
            return null;
        }
        if (Verifier_1.Verifier.verifySilkeySignature(jwtPayload, silkeyEthAddress) === false) {
            return null;
        }
        if (!Verifier_1.Verifier.verifyWebsiteSignature(jwtPayload, ssoParams, websiteOwnerAddress)) {
            return null;
        }
        try {
            Verifier_1.Verifier.assertRequiredParamsForScope(ssoParams.ssoScope, jwtPayload.export());
        }
        catch (e) {
            console.warn(e);
            return null;
        }
        return jwtPayload;
    }
    catch (e) {
        console.warn(e);
        return null;
    }
};
exports.tokenPayloadVerifier = tokenPayloadVerifier;
//# sourceMappingURL=sso.js.map