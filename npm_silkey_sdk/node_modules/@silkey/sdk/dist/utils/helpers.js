"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeyValue = exports.xor = exports.currentTimestamp = exports.strToBytes32 = exports.intToBuffer = exports.isTimestamp = exports.isSignature = exports.isEthereumAddress = exports.isPrivateKey = exports.isZeroHex = exports.isHex = exports.prepend0x = exports.remove0x = exports.isSet = exports.isNotSet = void 0;
const isNotSet = (v) => {
    // eslint-disable-next-line valid-typeof
    return v === null || typeof v === 'undefined' || typeof v === undefined;
};
exports.isNotSet = isNotSet;
const isSet = (v) => !exports.isNotSet(v);
exports.isSet = isSet;
const remove0x = (v) => ['0X', '0x'].includes(v.slice(0, 2)) ? v.slice(2) : v;
exports.remove0x = remove0x;
const prepend0x = (v) => ['0X', '0x'].includes(v.slice(0, 2)) ? v : `0x${v}`;
exports.prepend0x = prepend0x;
const isHex = (v) => {
    if (!v) {
        return false;
    }
    const no0x = exports.remove0x(v);
    for (let i = 0; i < no0x.length; i++) {
        if (isNaN(parseInt(no0x.charAt(i), 16))) {
            return false;
        }
    }
    return true;
};
exports.isHex = isHex;
const isZeroHex = (v) => exports.isHex(v) && exports.remove0x(v).replace('0', '') === '';
exports.isZeroHex = isZeroHex;
const isPrivateKey = (v) => exports.isHex(v) && exports.remove0x(v).length === 64 && !exports.isZeroHex(v);
exports.isPrivateKey = isPrivateKey;
const isEthereumAddress = (v) => exports.isHex(v) && exports.remove0x(v).length === 40 && !exports.isZeroHex(v);
exports.isEthereumAddress = isEthereumAddress;
const isSignature = (sig) => {
    if (!sig) {
        return false;
    }
    return exports.isHex(sig) && exports.remove0x(sig).length === 130 && !exports.isZeroHex(sig);
};
exports.isSignature = isSignature;
const isTimestamp = (t) => t > 0 && t.toString(10).length === 10;
exports.isTimestamp = isTimestamp;
const intToBuffer = (i) => {
    const hex = i.toString(16);
    return Buffer.from(`${hex.length % 2 === 0 ? '' : '0'}${hex}`, 'hex');
};
exports.intToBuffer = intToBuffer;
const strToBytes32 = (str) => '0x' + Buffer.from(str).toString('hex').padEnd(64, '0');
exports.strToBytes32 = strToBytes32;
const currentTimestamp = () => Math.round(Date.now() / 1000);
exports.currentTimestamp = currentTimestamp;
const xor = (a, b) => !(a == b);
exports.xor = xor;
// eslint-disable-next-line
const getKeyValue = (obj) => (key) => obj[key];
exports.getKeyValue = getKeyValue;
//# sourceMappingURL=helpers.js.map